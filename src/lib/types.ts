export interface Property {
    // Core Identification & Meta
    id: string; // Internal unique ID, generated by the system
    original_url?: string; // URL from which the property was scraped, if applicable
    page_link?: string;    // Direct link to the property page from the site, if available
    scraped_at?: string; // ISO date string of when scraping occurred
    reference_id?: string; // Unique reference ID or listing number from the source

    // Original Content (Pre-Enhancement by AI)
    original_title?: string;
    original_description?: string; // This will be 'content' from requirements

    // Enhanced Content (Post-Enhancement by AI)
    // 'title' from requirements maps to 'enhanced_title' or just 'title' if no original
    // 'content' from requirements maps to 'enhanced_description' or 'description'
    title?: string; // Title (potentially enhanced)
    description?: string; // Description (potentially enhanced) - Maps to 'Content' from requirements

    // New fields from requirements document
    // Image field from req is image_urls, first one becomes image_url (primary)
    image_urls?: string[]; // All extracted image URLs (server-processed)
    image_url?: string; // Primary image URL (server-processed)
    matterportLink?: string;
    categories?: string[];
    whatDoYouRent?: string; // "What do you rent ?"
    city?: string; // City (already existed, kept)
    neighborhoodArea?: string; // "Neighborhood/Area" (maps to existing 'neighborhood' or is new)
    propertyAgent?: string;
    tenantType?: string; // "Tenant Type" (already existed, kept)
    nationality?: string;
    religion?: string;
    propertyCountry?: string;
    propertyBuilding?: string; // (maps to existing 'building_information' or is new)
    propertyPrice?: string; // (maps to existing 'price', kept)
    propertyDiscount?: string;
    propertyDeposit?: string;
    propertySize?: string; // (maps to existing 'area', kept)
    propertyTax?: string;
    propertyDisplayStatus?: string;
    propertyGenderPreference?: string;

    featuredProperty?: boolean;
    platinumProperty?: boolean;
    premiumProperty?: boolean;

    propertyOwnerDetails?: string; // Could be text, or structured if AI can manage
    propertyMinimumStay?: string;
    propertyMaximumStay?: string;
    propertyBed?: number; // (maps to existing 'bedrooms', kept)
    propertyLivingRoom?: number;
    propertyRoom?: number; // Total rooms
    propertyBathroom?: number; // (maps to existing 'bathrooms', kept)
    propertyAddress?: string; // (maps to existing 'location', kept)
    propertyLongitude?: number;
    propertyLatitude?: number;
    propertyApprovalStatus?: string;
    propertyFurnishingStatus?: string; // (maps to existing 'furnish_type', kept)
    propertyMinimumNotice?: string;

    featuresAndAmenities?: string[]; // (maps to existing 'features', kept)
    termAndCondition?: string; // (maps to existing 'terms_and_condition', kept)

    // Fields from the old 'Property' type to consider merging/keeping if valuable & distinct
    // enhanced_title?: string; // Covered by title if we assume title is the enhanced one
    // enhanced_description?: string; // Covered by description if we assume it's enhanced
    // property_type?: string; // Consider if 'categories' is sufficient. For now, assume categories.
    // mortgage?: string; // Not in new list. Keep if useful. (Optional)
    // county?: string; // If PropertyCountry, City, NeighborhoodArea are primary. (Optional)
    // rental_timing?: string; // (Optional)
    // floor_number?: number; // (Optional, could be in PropertyBuilding)

    // Regulatory/Reference IDs from old schema (useful to keep, make optional)
    validated_information?: string;
    permit_number?: string;
    ded_license_number?: string;
    rera_registration_number?: string;
    dld_brn?: string;
    listed_by_name?: string; // Could be part of PropertyOwnerDetails or PropertyAgent
    listed_by_phone?: string;
    listed_by_email?: string;
}

export type HistoryEntry = {
    id: string;
    type: 'URL' | 'HTML' | 'BULK';
    details: string;
    propertyCount: number;
    date: string;
};
